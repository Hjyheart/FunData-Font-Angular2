var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Http, Response } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import * as marked from 'marked';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
var MarkdownService = (function () {
    function MarkdownService(http) {
        this.http = http;
        this.extendRenderer();
        this.setMarkedOptions();
    }
    //get the content from remote resource
    MarkdownService.prototype.getContent = function (path) {
        return this.http.get(path)
            .map(this.extractData)
            .catch(this.handleError);
    };
    // handle data
    MarkdownService.prototype.extractData = function (res) {
        return res.text() || '';
    };
    //handle error
    MarkdownService.prototype.handleError = function (error) {
        var errMsg;
        if (error instanceof Response) {
            var body = error.json() || '';
            var err = body.error || JSON.stringify(body);
            errMsg = error.status + " - " + (error.statusText || '') + " " + err;
        }
        else {
            errMsg = error.message ? error.message : error.toString();
        }
        console.error(errMsg);
        return Observable.throw(errMsg);
    };
    // extend marked render to support todo checkbox
    MarkdownService.prototype.extendRenderer = function () {
        this.renderer = new marked.Renderer();
        this.renderer.listitem = function (text) {
            if (/^\s*\[[x ]\]\s*/.test(text)) {
                text = text
                    .replace(/^\s*\[ \]\s*/, '<input type="checkbox" style=" vertical-align: middle; margin: 0 0.2em 0.25em -1.6em; font-size: 16px; " disabled> ')
                    .replace(/^\s*\[x\]\s*/, '<input type="checkbox" style=" vertical-align: middle; margin: 0 0.2em 0.25em -1.6em; font-size: 16px; " checked disabled> ');
                return '<li style="list-style: none">' + text + '</li>';
            }
            else {
                return '<li>' + text + '</li>';
            }
        };
    };
    MarkdownService.prototype.setMarkedOptions = function () {
        marked.setOptions({
            renderer: this.renderer,
            gfm: true,
            tables: true,
            breaks: false,
            pedantic: false,
            sanitize: false,
            smartLists: true,
            smartypants: false
        });
    };
    // comple markdown to html
    MarkdownService.prototype.compile = function (data) {
        return marked(data);
    };
    return MarkdownService;
}());
MarkdownService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [Http])
], MarkdownService);
export { MarkdownService };
//# sourceMappingURL=markdown.service.js.map