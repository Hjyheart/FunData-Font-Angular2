{"version":3,"file":"markdown.service.js","sourceRoot":"","sources":["../../src/markdown/markdown.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Response} from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport * as  marked from 'marked';\n\nimport 'rxjs/add/observable/throw';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/map';\n\n\n@Injectable()\nexport class MarkdownService {\n  private renderer:any;\n  constructor(private http: Http) {\n    this.extendRenderer();\n    this.setMarkedOptions();\n  }\n\n  //get the content from remote resource\n  getContent(path: string):Observable<any> {\n    return this.http.get(path)\n       .map(this.extractData)\n       .catch(this.handleError);\n   }\n\n   // handle data\n   extractData(res: Response): string {\n     return res.text() || '';\n   }\n\n   //handle error\n   handleError(error: Response | any):any {\n     let errMsg: string;\n     if (error instanceof Response) {\n       const body = error.json() || '';\n       const err = body.error || JSON.stringify(body);\n       errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n     } else {\n       errMsg = error.message ? error.message : error.toString();\n     }\n     console.error(errMsg);\n     return Observable.throw(errMsg);\n   }\n\n   // extend marked render to support todo checkbox\n   extendRenderer() {\n     this.renderer = new marked.Renderer();\n     this.renderer.listitem = function(text:string) {\n      if (/^\\s*\\[[x ]\\]\\s*/.test(text)) {\n      text = text\n        .replace(/^\\s*\\[ \\]\\s*/, '<input type=\"checkbox\" style=\" vertical-align: middle; margin: 0 0.2em 0.25em -1.6em; font-size: 16px; \" disabled> ')\n        .replace(/^\\s*\\[x\\]\\s*/, '<input type=\"checkbox\" style=\" vertical-align: middle; margin: 0 0.2em 0.25em -1.6em; font-size: 16px; \" checked disabled> ');\n          return '<li style=\"list-style: none\">' + text + '</li>';\n        } else {\n          return '<li>' + text + '</li>';\n        }\n      };\n   }\n\n   setMarkedOptions() {\n     marked.setOptions({\n       renderer: this.renderer,\n       gfm: true,\n       tables: true,\n       breaks: false,\n       pedantic: false,\n       sanitize: false,\n       smartLists: true,\n       smartypants: false\n     });\n\n   }\n\n   // comple markdown to html\n   compile(data:string) {\n      return marked(data);\n   }\n\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}